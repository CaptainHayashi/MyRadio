#!/usr/local/bin/python
'''
This Python script implements the checkpassword interface, as defined at
http://cr.yp.to/checkpwd/interface.html

This interface is a compatible authentication method for Dovecot and any other
IMAP system, but will verify against their MyRadio credentials.

This only succeeds if the user has a local_name set.

Code is based on a mixture of
https://github.com/korylprince/dovecot-checkpassword-ldap and
https://github.com/UniversityRadioYork/mixclouder

@todo Is account locked?
'''
import sys
import os
import requests
import json
import ConfigParser
from traceback import print_exc

def NOAUTH():
    sys.exit(1)

def NOEXIST():
    sys.exit(3)

def ERROR():
    sys.exit(111)

def write_demo_config(f):
    config = configparser.RawConfigParser()
    config.add_section("checkpassword")
    config.set("checkpassword", "myradio_api_key", "apikeygoeshere")
    config.set("checkpassword", "myradio_url", "https://mydomain.fm/api/")
    config.set("checkpassword", "mail_user", "mailaccess")
    config.set("checkpassword", "mail_base", "/home/mboxes")
    config.write(f)

def myradio_api_request(url, payload={}):
    payload['api_key'] = config.get("checkpassword", "myradio_api_key")
    r = requests.post(config.get("checkpassword", "myradio_url") + url, params=payload)
    r = r.json() if callable (r.json) else r.json
    if r['status'] == 'OK':
        return r['payload']
    elif r['status'] == 403:
        logging.error("Server returned error 403 - The API key provided does not have access to the method %s", url)
        sys.exit()
    elif r['status'] == 401:
        logging.error("Server returned error 401 - No api key provided")
        sys.exit()

class User(object):

    def __init__(self,user,domain,passwd):
        # MyRadio doesn't use domain.
        data = myradio_api_request('Utils/testCredentials', {
            'user': user,
            'pass': passwd,
            'full': 'false'
        })
        
        if not data or not data['local_name']:
            NOAUTH()
        else:
            os.environ['USER'] = data['local_name']
            os.environ['HOME'] = config.get("checkpassword", "mail_base")
            os.environ['userdb_uid'] = config.get("checkpassword", "mail_user")
            os.environ['userdb_gid'] = config.get("checkpassword", "mail_user")
            #Could add quotas here with userdb_quota_rule
            os.environ['EXTRA'] = 'userdb_uid userdb_gid'
            print sys.argv[1]
            os.system(sys.argv[1])

config = ConfigParser.RawConfigParser()
config.read(os.path.dirname(os.path.abspath(__file__))+'/checkpassword.conf')

data = os.fdopen(3)
input = data.read(512).split("\0")

try:
    user = os.environ['AUTH_USERNAME']
except KeyError:
    user = input[0] 
try:
    domain = os.environ['AUTH_DOMAIN']
except KeyError:
    domain = '*'
try:
    passwd = os.environ['AUTH_PASSWORD']
except KeyError:
    passwd = input[1] 

try:
    User(user,domain,passwd)
except SystemExit:
    raise
except:
    with open('/tmp/err.log','a') as f:
        print_exc(file=f)
    ERROR()