<?php

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-01-03 at 01:21:10.
 */
class CoreUtilsTest extends PHPUnit_Framework_TestCase {

  /**
   * @var CoreUtils
   */
  protected $object;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    //$this->object = new CoreUtils;
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    
  }

  /**
   * Generated from @assert ('Core', 'default') === true.
   *
   * @covers CoreUtils::isValidController
   */
  public function testIsValidController() {
    $this->assertSame(
            true
            , CoreUtils::isValidController('Core', 'default')
    );
  }

  /**
   * Generated from @assert ('foo', 'barthatdoesnotandwillnoteverexisteverbecauseitwouldbesilly') === false.
   *
   * @covers CoreUtils::isValidController
   */
  public function testIsValidController2() {
    $this->assertSame(
            false
            , CoreUtils::isValidController('foo', 'barthatdoesnotandwillnoteverexisteverbecauseitwouldbesilly')
    );
  }

  /**
   * Generated from @assert ('../foo', 'bar') === false.
   *
   * @covers CoreUtils::isValidController
   */
  public function testIsValidController3() {
    $this->assertSame(
            false
            , CoreUtils::isValidController('../foo', 'bar')
    );
  }

  /**
   * Generated from @assert ('foo', '../bar') === false.
   *
   * @covers CoreUtils::isValidController
   */
  public function testIsValidController4() {
    $this->assertSame(
            false
            , CoreUtils::isValidController('foo', '../bar')
    );
  }

  /**
   * Generated from @assert () !== false.
   *
   * @covers CoreUtils::getTemplateObject
   */
  public function testGetTemplateObject() {
    $this->assertNotSame(
            false
            , CoreUtils::getTemplateObject()
    );
  }

  /**
   * Generated from @assert () !== null.
   *
   * @covers CoreUtils::getTemplateObject
   */
  public function testGetTemplateObject2() {
    $this->assertNotSame(
            null
            , CoreUtils::getTemplateObject()
    );
  }

  /**
   * Generated from @assert ('safe!') === true.
   *
   * @covers CoreUtils::actionSafe
   */
  public function testActionSafe() {
    $this->assertSame(
            true
            , CoreUtils::actionSafe('safe!')
    );
  }

  /**
   * Generated from @assert ('../notsafe!') throws MyURYException.
   *
   * @covers CoreUtils::actionSafe
   * @expectedException MyURYException

   */
  public function testActionSafe2() {
    CoreUtils::actionSafe('../notsafe!');
  }

  /**
   * Generated from @assert (40000) == '01/01/1970'.
   *
   * @covers CoreUtils::happyTime
   */
  public function testHappyTime() {
    $this->assertEquals(
            '01/01/1970'
            , CoreUtils::happyTime(40000)
    );
  }

  /**
   * Generated from @assert (30) == '01/01/1970 00:00:30'.
   *
   * @covers CoreUtils::getTimestamp
   */
  public function testGetTimestamp() {
    $this->assertEquals(
            '01/01/1970 00:00:30'
            , CoreUtils::getTimestamp(30)
    );
  }

  /**
   * Generated from @assert () == 2012.
   *
   * @covers CoreUtils::getAcademicYear
   */
  public function testGetAcademicYear() {
    $this->assertEquals(
            2012
            , CoreUtils::getAcademicYear()
    );
  }

  /**
   * Generated from @assert (0, 0) == '0 seconds'.
   *
   * @covers CoreUtils::makeInterval
   */
  public function testMakeInterval() {
    $this->assertEquals(
            '0 seconds'
            , CoreUtils::makeInterval(0, 0)
    );
  }

  /**
   * Generated from @assert () == null.
   *
   * @covers CoreUtils::setUpAuth
   */
  public function testSetUpAuth() {
    $this->assertEquals(
            null
            , CoreUtils::setUpAuth()
    );
  }

  /**
   * Generated from @assert (7449, 'Test') == null.
   *
   * @covers CoreUtils::debug_for
   */
  public function testDebug_for() {
    $this->assertEquals(
            null
            , CoreUtils::debug_for(7449, 'Test')
    );
  }

  /**
   * Generated from @assert ('Lady Quackington') throws MyURYException.
   *
   * @covers CoreUtils::getServiceId
   * @expectedException MyURYException

   */
  public function testGetServiceId() {
    CoreUtils::getServiceId('Lady Quackington');
  }

  /**
   * @covers CoreUtils::makeURL
   * @todo   Implement testMakeURL().
   */
  public function testMakeURL() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers CoreUtils::hasPermission
   * @todo   Implement testHasPermission().
   */
  public function testHasPermission() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers CoreUtils::requirePermission
   * @todo   Implement testRequirePermission().
   */
  public function testRequirePermission() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers CoreUtils::requirePermissionAuto
   * @todo   Implement testRequirePermissionAuto().
   */
  public function testRequirePermissionAuto() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers CoreUtils::getAllActionPermissions
   * @todo   Implement testGetAllActionPermissions().
   */
  public function testGetAllActionPermissions() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers CoreUtils::getAllPermissions
   * @todo   Implement testGetAllPermissions().
   */
  public function testGetAllPermissions() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers CoreUtils::getServices
   * @todo   Implement testGetServices().
   */
  public function testGetServices() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers CoreUtils::getModuleId
   * @todo   Implement testGetModuleId().
   */
  public function testGetModuleId() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers CoreUtils::getActionId
   * @todo   Implement testGetActionId().
   */
  public function testGetActionId() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers CoreUtils::addActionPermission
   * @todo   Implement testAddActionPermission().
   */
  public function testAddActionPermission() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers CoreUtils::getServiceVersionForUser
   * @todo   Implement testGetServiceVersionForUser().
   */
  public function testGetServiceVersionForUser() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers CoreUtils::getDefaultServiceVersion
   * @todo   Implement testGetDefaultServiceVersion().
   */
  public function testGetDefaultServiceVersion() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

  /**
   * @covers CoreUtils::getServiceVersions
   * @todo   Implement testGetServiceVersions().
   */
  public function testGetServiceVersions() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
            'This test has not been implemented yet.'
    );
  }

}
